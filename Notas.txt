dependency:purge-local-repository clean install -U

docker build -t eureka-server:v1 .
docker run -p 8761:8761 --name eureka-server --network springcloud eureka-server:v1

docker pull mysql:8 
docker run -p 3306:3306 --name mysql8-server --network springcloud -e MYSQL_ROOT_PASSWORD=sasa -e MYSQL_DATABASE=db_springboot_products -d mysql:8

docker pull postgres:15-alpine
docker run -p 5432:5432 --name postgresql-server --network springcloud -e POSTGRES_PASSWORD=sasa -e POSTGRES_DB=db_springboot_users -d postgres:15-alpine

docker build -t product-service:v1 .
docker run -P --network springcloud product-service:v1

docker build -t gateway-server:v1 .
docker run -p 8080:8080 --name gateway-server --network springcloud gateway-server:v1

docker build -t user-service:v1 .
docker run -P --network springcloud user-service:v1

docker build -t security-service:v1 .
docker run -p 9100:9100 --network springcloud security-service:v1

docker build -t item-service:v1 .
docker run -p 8092:8092 --network springcloud item-service:v1

docker run -p 8092:8092 -p 8005:8005 -p 8007:8007 --network springcloud item-service:v1

docker pull rabbitmq:3.12-management-alpine --> El usuario y el Password es guest

docker run -p 15672:15672 -p 5672:5672 --name service-rabbitmq3.12 --network springcloud -d rabbitmq:3.12-management-alpine

CREATE TABLE IF NOT EXISTS zipkin_spans (
  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',
  `trace_id` BIGINT NOT NULL,
  `id` BIGINT NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `remote_service_name` VARCHAR(255),
  `parent_id` BIGINT,
  `debug` BIT(1),
  `start_ts` BIGINT COMMENT 'Span.timestamp(): epoch micros used for endTs query and to implement TTL',
  `duration` BIGINT COMMENT 'Span.duration(): micros used for minDuration and maxDuration query',
  PRIMARY KEY (`trace_id_high`, `trace_id`, `id`)
) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;

ALTER TABLE zipkin_spans ADD INDEX(`trace_id_high`, `trace_id`) COMMENT 'for getTracesByIds';
ALTER TABLE zipkin_spans ADD INDEX(`name`) COMMENT 'for getTraces and getSpanNames';
ALTER TABLE zipkin_spans ADD INDEX(`remote_service_name`) COMMENT 'for getTraces and getRemoteServiceNames';
ALTER TABLE zipkin_spans ADD INDEX(`start_ts`) COMMENT 'for getTraces ordering and range';

CREATE TABLE IF NOT EXISTS zipkin_annotations (
  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',
  `trace_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.trace_id',
  `span_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.id',
  `a_key` VARCHAR(255) NOT NULL COMMENT 'BinaryAnnotation.key or Annotation.value if type == -1',
  `a_value` BLOB COMMENT 'BinaryAnnotation.value(), which must be smaller than 64KB',
  `a_type` INT NOT NULL COMMENT 'BinaryAnnotation.type() or -1 if Annotation',
  `a_timestamp` BIGINT COMMENT 'Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp',
  `endpoint_ipv4` INT COMMENT 'Null when Binary/Annotation.endpoint is null',
  `endpoint_ipv6` BINARY(16) COMMENT 'Null when Binary/Annotation.endpoint is null, or no IPv6 address',
  `endpoint_port` SMALLINT COMMENT 'Null when Binary/Annotation.endpoint is null',
  `endpoint_service_name` VARCHAR(255) COMMENT 'Null when Binary/Annotation.endpoint is null'
) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;

ALTER TABLE zipkin_annotations ADD UNIQUE KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT 'Ignore insert on duplicate';
ALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT 'for joining with zipkin_spans';
ALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`) COMMENT 'for getTraces/ByIds';
ALTER TABLE zipkin_annotations ADD INDEX(`endpoint_service_name`) COMMENT 'for getTraces and getServiceNames';
ALTER TABLE zipkin_annotations ADD INDEX(`a_type`) COMMENT 'for getTraces and autocomplete values';
ALTER TABLE zipkin_annotations ADD INDEX(`a_key`) COMMENT 'for getTraces and autocomplete values';
ALTER TABLE zipkin_annotations ADD INDEX(`trace_id`, `span_id`, `a_key`) COMMENT 'for dependencies job';

CREATE TABLE IF NOT EXISTS zipkin_dependencies (
  `day` DATE NOT NULL,
  `parent` VARCHAR(255) NOT NULL,
  `child` VARCHAR(255) NOT NULL,
  `call_count` BIGINT,
  `error_count` BIGINT,
  PRIMARY KEY (`day`, `parent`, `child`)
) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;

docker build -t zipkin-server:v1 .

docker run -p 9411:9411 --name zipkin-server --network springcloud -e RABBIT_ADDRESSES=service-rabbitmq3.12:5672 -e STORAGE_TYPE=mysql -e MYSQL_USER=zipkin -e MYSQL-PASS=zipkin -e MYSQL_HOST=mysql8-server zipkin-server:v1

docker stop $(docker ps -q) --> detener contenedores up
docker ps -q --> listar contenedores up 

docker ps -a --> All

docker logs - id_contenedor 

docker rm $(docker ps -aq) --> Eliminar todos los contenedores

docker-compose up --> levantamos los servicios

docker-compose down -v 

docker-compose up -d config-server --> Para dar prioridad a un servicio determinado.

